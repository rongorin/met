@*@model IEnumerable<Metope.DAL.Cash_Transactions>*@
@model IEnumerable<MetopeMVCApp.Models.CashTransactionIndexViewModel>
@using GridMvc.Html
@{
    ViewBag.Title = "Cash transactions";
    //List<string> _sizes = new List<string>() { "10", "20", "50", "100" };
}
@section Styles {
@Styles.Render("~/Content/GridMvc")
@Styles.Render("~/Content/datetime")
    <link href="~/Content/cssNoLines.css" rel="stylesheet" />
    @*@Styles.Render("~/Content/datetime")*@
}
 
<h2>
    Cash Transactions  
    @if (ViewBag.Portfolio!= null)
    {
        @: for @ViewBag.Portfolio 
    }
    @if (ViewBag.UserInputDate != null)
    {

        if (ViewBag.UserInputDate == DateTime.Now.Date.ToString("dd/MM/yyyy"))
        {
            @:  (for date @ViewBag.LastRecordDate to Today ) 
        }
        else
        {
            @:  (for date @ViewBag.LastRecordDate to @ViewBag.UserInputdate) 
        }
    } 
</h2>
<h5>(note only the most recent 50 records are retrieved up to the selected date)</h5>
   
@using (Html.BeginForm(null, null, new { PortfolioCode = ViewBag.Portfolio }, FormMethod.Post, new { @class = "form-horizontal" }))
{
    <div class="row">
        <div class="col-md-2">
            @Html.ActionLink("Create New", "Create", new { PortfolioCode = ViewBag.Portfolio }, null)
        </div>

        @Html.Partial("_UserSelectDate") 

    </div>
} 
@Html.Partial("_MsgSuccesFail", Model)

<div class="code-cut">
    @Html.Grid(Model).Named("depGrid").Columns(columns =>
    {
        columns.Add(c => c.Cash_Transaction_ID, true); // key
        columns.Add(c => c.Transaction_Date).Titled("Transaction Date").Filterable(true).SetWidth(150).Format("{0:dd MMM yyyy}");

        columns.Add(c => c.Transaction_Source_Code)
            .Titled("Transaction Source code").Filterable(true)
            .SetWidth(90); 
        //columns.Add().Encoded(false).Sanitized(false).SetWidth(10).RenderValueAs(o => Html.CheckBox("checked", false));

        columns.Add(c => c.Ticker )
            .Titled("Cash Security (ticker)").Filterable(true)
            .SetWidth(90); 
        
        columns.Add(c => c.Transaction_Amount).Titled("Transaction Amount").Css("text-right").Filterable(false)
            .RenderValueAs(x => String.Format("<span class=\"pull-right\">{0:0,0.00}</span>", x.Transaction_Amount)).Encoded(false)
            .Sanitized(false)
            .SetWidth(120);


        columns.Add(c => c.Transaction_Currency_Code)
            .Titled("Currency").Filterable(true)
            .SetWidth(90);

        columns.Add()
        .Encoded(false)
        .Sanitized(false)
        .SetWidth(50)
        .RenderValueAs(c => @<u>
            @Html.ActionLink("Edit", "Edit", "CashTransactions", new { id = c.Cash_Transaction_ID }, null)
        </u>);
        columns.Add()
        .Encoded(false)
        .Sanitized(false)
        .SetWidth(50)
        .RenderValueAs(c => @<u>
            @Html.ActionLink("Delete", "Delete", "CashTransactions", new { id = c.Cash_Transaction_ID }, null)
        </u>);
         
    }).WithPaging(50).Sortable(true)

</div> 
<br />
@Html.ActionLink("Go To Portfolios List", "Index", "Portfolio", new { }, null)
@section Scripts { @Scripts.Render("~/bundles/datetime")
@Scripts.Render("~/bundles/GridMvc")
<script>
        var detailsUrl = '@Url.Action("Edit", "CashTransactions")';
        $(function () {
            pageGrids.depGrid.onRowSelect(function (e) {
                var personId = e.row.Cash_Transaction_ID;
        });
    });
</script>

}




 
