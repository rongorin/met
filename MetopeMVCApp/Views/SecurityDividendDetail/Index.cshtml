@model  MetopeMVCApp.Models.SecurityDividendDetailViewModel
  
@using GridMvc.Html
@{
    ViewBag.Title = "GridDividends";

    //List<SelectListItem> numOfRows = new List<SelectListItem> {
    //                   new SelectListItem { Text = "10", Value = "10" },
    //                   new SelectListItem { Text = "20", Value = "20" },
    //                   new SelectListItem { Text = "50", Value = "50" }
    //                   new SelectListItem { Text = "50", Value = "100" }
    //                   };
    List<string> _sizes = new List<string>() { "10", "20", "50", "100" };
    //ViewBag.SkipValue = ((SelectList)ViewBag.DogNames).SelectedValue ?? Convert.ToInt16(numOfRows.Skip(1).First().Value);

    ViewBag.RowsPgSelected = ((SelectList)ViewBag.RowsPerPage).SelectedValue ?? _sizes[1];

    //SelectListItem[] items = numOfRows.ToArray();
    //SelectListItem selectedItem = items.FirstOrDefault(i => i.Value == "1")
    //    ?? items[0];
}

@section Styles {
    @Styles.Render("~/Content/GridMvc")
    @Styles.Render("~/Content/datetime")
    <link href="~/Content/cssNoLines.css" rel="stylesheet" />
    <link href="~/Content/myButtons.css" rel="stylesheet" /> 
}
@helper CustomRenderingOfColumn(Metope.DAL.Security_Dividend_Detail sdd)
{
    if (sdd.Dividend_Type == "S")
    {
        <text>Special</text>
    }
    else if (sdd.Dividend_Type == "E")
    {
        <text>Exceptional</text>
    }
   else if  (sdd.Dividend_Type == "F")
    { 
       <text>F</text>
    }
    else 
    {
        <text>I</text>
    } 
} 
<h2>
   Security Dividend Details for @Model.SecurityDetails.Security_Name 
</h2> 
@Html.Partial("_CreateHyperLinkSDD", Model) 
 
@Html.Partial("_MsgSuccesFail", Model)

<div class="code-cut">
    @Html.Grid(Model.SecurityDividendDetail).Named("sdd").Columns(columns =>
    {
        columns.Add(c => c.Dividend_Seq_Number)
            .Titled("Sequency No.").Filterable(true)
            .SetWidth(80); 
        
        //show the dividend Type:
        columns.Add()
            .Titled("Dividend Type").RenderValueAs(o => CustomRenderingOfColumn(o))
            .SetWidth(100); 

        columns.Add(c => c.Financial_Year)
            .Titled("Financial Year").Filterable(true)
            .SetWidth(120);
        //hides column, but use this in js:    PrCur = c.Security_Detail.Price_Curr, 
        columns.Add(c => c.Entity_ID, true);
         
        columns.Add(c => c.Forecast_Ex_Dividend_Date).Titled("Forecast Ex Div Date").Filterable(true).SetWidth(150).Format("{0:dd MMM yyyy}");
        columns.Add(c => c.Actual_Ex_Dividend_Date ).Titled("Actual Ex Div Date").Filterable(true).SetWidth(150).Format("{0:dd MMM yyyy}");
 
        columns.Add(c => c.Forecast_Dividend).Titled("Forecast Dividend").Css("text-right").Filterable(false)
        .RenderValueAs(x => String.Format("<span class=\"pull-right\">{0:0,0.00}</span>", x.Forecast_Dividend)).Encoded(false)
        .Sanitized(false)
        .SetWidth(120);

        columns.Add(c => c.Security_Detail.Security_ID).Titled("Actual Dividend").Css("text-right").Filterable(false);
        columns.Add(c => c.Actual_Dividend).Titled("Actual Dividend").Css("text-right").Filterable(false)
        .RenderValueAs(x => String.Format("<span class=\"pull-right\">{0:0,0.00}</span>", x.Actual_Dividend)).Encoded(false)
        .Sanitized(false)
        .SetWidth(120);
        
        columns.Add()
        .Encoded(false)
        .Sanitized(false)
        .SetWidth(50)
        .RenderValueAs(c => @<u>
            @Html.ActionLink("Edit", "Edit", "SecurityDividendDetail", new { EntityId = c.Entity_ID, SecurityId = c.Security_ID, DivSeqNo = c.Dividend_Seq_Number, Nav = @ViewBag.Nav }, null)
        </u>);
        columns.Add()
     .Encoded(false)
     .Sanitized(false)
     .SetWidth(50)
     .RenderValueAs(c => @<u>
        @Html.ActionLink("Delete", "Delete", "SecurityDividendDetail", new { EntityId = c.Entity_ID, SecurityId = c.Security_ID, DivSeqNo = c.Dividend_Seq_Number, Nav = @ViewBag.Nav }, null)
    </u>); 
    }).Sortable(true)
</div> 
@*@using (Html.BeginForm("Manage", "Account", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))*@
<div class="container">
    <div class="row">
        <br />
        @using (Html.BeginForm("RunSp", "SecurityDividendDetail", new { SecurityId = @Model.SecurityDetails.Security_ID }, FormMethod.Post, null))
        {
            <div class="col-md-6 ">
                @Html.ActionLink("Back to Securities", "Index", "SecurityDetail")
            </div>
            @Html.Hidden("Security_ID", Model.SecurityDetails.Security_ID);
              
            <div class="col-md-3 pull-right ">   
                <a class="btn btn-default customWidth pull-right"
                   href="@string.Format("./SecurityDividendSplit?SecurityId={0}", Model.SecurityDetails.Security_ID)">
                    &nbsp;Dividend split
                </a> 
            </div>
            
            <div class="col-md-3 pull-right ">
                @Html.Partial("_StoredProcButtons", new MetopeMVCApp.Models.SPNames { SPName1 = "Update Divnd Sched only" })
            </div> 
        } 
    </div>
</div>
@section Scripts { @Scripts.Render("~/bundles/datetime")
@Scripts.Render("~/bundles/GridMvc")
<script>
        var detailsUrl = '@Url.Action("Edit", "SecurityDetail")';
        $(function () {
            pageGrids.sdd.onRowSelect(function (e) {
                var personId = e.row.Security_ID;

             //alert(personId);

            //$.get(detailsUrl, { id: personId })
            //    .success(function (data) {
            //        $('#mainList').html(data);
            //    });


            //$.ajax({
            //    url: detailsUrl,
            //    dataType: 'html',
            //    data: { SecurityID: e.row.SecurityID },
            //    traditional: true,
            //    type: 'GET',
            //    success: function (content) {
            //        success(content);
            //    },
            //    error: function (request, error) {
            //        alert(request.status);
            //        if (request.status == 522) window.location.href = request.statusText;
            //    }
            //})
        });
    });
</script>

}


 