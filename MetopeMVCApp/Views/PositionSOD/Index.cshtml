@model IEnumerable<MetopeMVCApp.Models.PositionsSODIndexViewModel>
 
@using GridMvc.Html
@{
    ViewBag.Title = "Index";
    List<string> _sizes = new List<string>() { "10", "20", "50", "100" };

    ViewBag.RowsPgSelected = ((SelectList)ViewBag.RowsPerPage).SelectedValue ?? _sizes[1];
}
@section Styles {
    @Styles.Render("~/Content/GridMvc")
    <link href="~/Content/cssNoLines.css" rel="stylesheet" />
    <link href="~/Content/myButtons.css" rel="stylesheet" />
}
@helper CustomRenderingOfColumn(Metope.DAL.Position_SOD ps)
{
    if (ps.Long_Short_Indicator == "S")
    {
        <text>Short</text>
    }
    else
    {
        <text>Long</text>
    }
}
  @*<div class="panel-heading">
    <div class="row">
        <div class="col-xs-12">
            <div class="pull-right">
                <button type="button"
                        class="btn btn-primary"
                        ng-click="vm.saveClick(creditCardForm)">
                    <i class="glyphicon glyphicon-floppy-disk"></i>
                    &nbsp;Save
                </button>
                <a class="btn btn-primary"
                   formnovalidate="formnovalidate"
                   href="#/">
                    <i class="glyphicon glyphicon-remove-circle"></i>
                    &nbsp;Cancel
                </a>
            </div>
        </div>
    </div>
</div>*@

<div id="mainList"> 
        <div class="row">
            <div class="col-md-7 ">
                <h2>Positions for <b>@ViewBag.Portfolio </b>
                    @if (ViewBag.UserInputDate != "")  {
                        @:  (for date @ViewBag.UserInputDate) 
                     }  
                </h2>  
            </div> 
        </div>
          @using (Html.BeginForm(null, null, new { PortfolioCode = ViewBag.Portfolio, inputDate = ViewBag.UserInputDate }, FormMethod.Post,
                                                new { enctype = "multipart/form-data", onsubmit = "return validateTagInput()", @class = "form-horizontal" }))
          {
            <input type="hidden" id="clickedSubmt" name="clickedSubmt">
             <input type="hidden" id="inputDateHid" name="inputDateHid"> 
             <div class="row">  
                <div class="col-md-2">
                    @Html.ActionLink("Create New", "Create", new { PortfolioCode = ViewBag.Portfolio, InputDate = ViewBag.UserInputDate }, null) 
                </div>

                 @Html.Partial("_UserSelectDate") 

            </div>  
      }
    @Html.Partial("_MsgSuccesFail", Model)
    <div class="code-cut">
        @Html.Grid(Model).Named("PositionSODGrd").Columns(columns =>
   { 
        columns.Add(c => c.Ticker)
               .Titled("Ticker").Filterable(true);
        columns.Add(c => c.Long_Short_Indicator)
               .Titled("Long/Short").Filterable(false).SetWidth(60);


        columns.Add(c => c.Security_ID, true);//hides column, but use this in js
        columns.Add(c => c.Entity_ID, true);
        columns.Add(c => c.Portfolio_Code, true);

        columns.Add(c => c.Position_Date).Titled("Position Date").Format("{0:d MMM yyyy}").SetWidth(230).Sortable(true).Filterable(true);


        columns.Add(c => c.Dealt_Quantity).Titled("Dealt Quantity").Css("text-right").Filterable(false)
                .RenderValueAs(x => String.Format("<span class=\"pull-right\">{0:0#}</span>", x.Dealt_Quantity)).Encoded(false)
                .Sanitized(false)
                ;

        columns.Add(c => c.Dealt_AllIn_Mkt_Value_BaseCur).Titled("Dealt AllIn Market BaseCurr").Css("text-right").Filterable(false)
                .RenderValueAs(x => String.Format("<span class=\"pull-right\">{0:0.00##}</span>", x.Dealt_AllIn_Mkt_Value_BaseCur)).Encoded(false)
                .Sanitized(false)
               ;
        columns.Add()
                .Encoded(false)
                .Sanitized(false)
                .SetWidth(60)
                .RenderValueAs(c => @<u>
                    @Html.ActionLink("Edit", "Edit", "PositionSOD", new { SecurityId = c.Security_ID, EntityId = c.Entity_ID, PortfolioCode = c.Portfolio_Code, PosDate = c.Position_Date, LongShortInd = c.Long_Short_Indicator, Nav = @ViewBag.Nav, inputDate = @ViewBag.UserInputDate }, null)
                </u>);

        columns.Add()
                .Encoded(false)
                .Sanitized(false)
                .SetWidth(80)
                .RenderValueAs(c => @<u>
                    @Html.ActionLink("Delete", "Delete", "PositionSOD", new { SecurityId = c.Security_ID, EntityId = c.Entity_ID, PortfolioCode = c.Portfolio_Code, PosDate = c.Position_Date, LongShortInd = c.Long_Short_Indicator, Nav = @ViewBag.Nav, inputDate = @ViewBag.UserInputDate }, null)
                </u>);

    }).WithPaging(Convert.ToInt16(ViewBag.RowsPgSelected)).Sortable(true)
    </div> 
</div>  
<br />
@Html.ActionLink("Go To Portfolios List", "Index", "Portfolio", new { }, null)
@section Scripts {
    @Scripts.Render("~/bundles/GridMvc")
    @Scripts.Render("~/bundles/datetime")
    <script>
    $(function () {
        pageGrids.PositionSODGrd.onRowSelect(function (e) {
            //here rather do full page load instead of the Ajax partial:
            // var myNav = "@ViewBag.Nav";

            //mtpApp is the default url. see _Layout.
            if ("@ViewBag.Nav" != "")
                myUrl2 = mtpApp.Urls.baseUrl + "PositionSOD/Edit?SecurityId=" + e.row.Security_ID + "&EntityId=" + e.row.Entity_ID + "&PortfolioCode=" + e.row.Portfolio_Code + "&PosDate=" + e.row.Position_Date + "&LongShortInd=" + e.row.Long_Short_Indicator + "&Nav=" + "@ViewBag.Nav" + "&inputDate=" + "@ViewBag.UserInputDate";
            else
                myUrl2 = mtpApp.Urls.baseUrl + "PositionSOD/Edit?SecurityId=" + e.row.Security_ID + "&EntityId=" + e.row.Entity_ID + "&PortfolioCode=" + e.row.Portfolio_Code + "&PosDate=" + e.row.Position_Date + "&LongShortInd=" + e.row.Long_Short_Indicator + "&Filtr=" + "@ViewBag.Filtr";

            window.location = myUrl2;
        });
        //not using this Ajax call anymore, rather server call to keep all consistent 
        //else {
        //    form1.submit();
        //}

    });  
    
    function validateTagInput() {
            //Called from submit click to post the selected Date. 
            //purpose is to check the url if inputDate is in the request url. if not, prevent form from posting and 
            //insert the string, with the value of the selected date (#inputDate) 
            //populate hidden fields:
        document.getElementById("inputDateHid").value = $('#inputDate').val();
        document.getElementById("clickedSubmt").value = "Y"; //indicates to server that submit was clicked
              
        var currentUrl = window.location.href; 
        var res = checkIfExists(currentUrl, "inputDate");
         
        if (res) { 
            checkIfValueBlank("inputDate", $('#inputDate').val()); // if exists, but is BLANK, this func will remove the param !
        }
        else  //if doesnt exist, add in.
        {  
            insertParam("inputDate", $('#inputDate').val()); 
            //event.preventDefault(); //dont post to server.
        } 
    } 
    function insertParam(key, value) {
        if (history.pushState) {
            // var newurl = window.location.protocol + "//" + window.location.host + search.pathname + '?myNewUrlQuery=1';
            var currentUrl = window.location.href;
            //remove any param for the same key
            var currentUrl = removeURLParameter(currentUrl, key);

            //figure out if we need to add the param with a ? or a &
            var queryStart;
            if (currentUrl.indexOf('?') !== -1) {
                queryStart = '&';
            } else {
                queryStart = '?';
            } 
            var newurl = currentUrl + queryStart + key + '=' + value 
            window.history.pushState({ path: newurl }, '', newurl);
        }
    }
    //function to remove query params form a url
    function removeURLParameter(url, parameter) { 
            var urlparts = url.split('?' );  
            var prefix = encodeURIComponent(parameter) + '=';
            var pars = urlparts[1].split(/[&;]/g);

            //reverse iteration as may be destructive
            for (var i = pars.length; i-- > 0;) {
                //idiom for string.startsWith
                if (pars[i].lastIndexOf(prefix, 0) !== -1) {
                    pars.splice(i, 1);
                }
            } 
            url = urlparts[0] + (pars.length > 0 ? '?' + pars.join('&') : ""); 
            return url; 
    }

    function checkIfExists(url, parameter) { 
        var urlparts = url.split('?'); 
         if (url.indexOf(parameter) >= 0) 
             return true; 
         else
             return false; 
    }

    function checkIfValueBlank(url, parameter) { 
        var currentUrl = window.location.href;   
        if (parameter == "") { 
            currentUrl = removeURLParameter(currentUrl, "inputDate");  // removes the param 
        }
        window.history.pushState({ path: currentUrl }, '', currentUrl); 
    } 
  </script>
}
