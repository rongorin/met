@model IEnumerable<MetopeMVCApp.Models.SelectOrderAllocEditorViewModel> 
 
@using GridMvc.Html
@{
    ViewBag.Title = "Order Allocations";
    //List<string> _sizes = new List<string>() { "10", "20", "50", "100" };
}
@section Styles {
    @Styles.Render("~/Content/GridMvc")
    <link href="~/Content/cssNoLines.css" rel="stylesheet" />
    @*@Styles.Render("~/Content/datetime")*@
}
<h2>Trades Listing (Order Allocations)</h2>
@Html.Partial("_MsgSuccesFail", Model)


<div class="code-cut">
    @Html.Grid(Model).Named("depGrid").Columns(columns =>
    {
        columns.Add().Titled("<input name='checkbox' type='checkbox'  id='select-all-checkbox' /> ")
            .Encoded(false).Sanitized(false).SetWidth(30).RenderValueAs(o => Html.CheckBox("checkedAbc", false, new
            {
                id = "checkedRw",
                name = "selectedIds",
                value = o.Allocation_ID 
            }));

        columns.Add(c => c.Ticker)
            .Titled("Ticker").Filterable(true)
            .SetWidth(90);
        
        //columns.Add().Encoded(false).Sanitized(false).SetWidth(10).RenderValueAs(o => Html.CheckBox("checked", false));
        columns.Add(c => c.Allocation_ID) .Titled("Id").Filterable(false) .SetWidth(30);
        
        columns.Add(c => c.Portfolio_Code)
            .Titled("Portfolio Code").Filterable(true)
            .SetWidth(160);
         
        columns.Add(c => c.Transaction_Type)
            .Titled("Trans Type").Filterable(true)
            .SetWidth(170);

        columns.Add(c => c.Trade_Date).Titled("Trade Date").Filterable(true).SetWidth(180).Format("{0:dd MMM yyyy}");

        columns.Add(c => c.Execution_AllIn_Price).Titled("Trade Price").Css("text-right").Filterable(false)
            .RenderValueAs(x => String.Format("<span class=\"pull-right\">{0:0,0.00}</span>", x.Execution_AllIn_Price)).Encoded(false)
            .Sanitized(false)
            .SetWidth(120); 
        columns.Add(c => c.Execution_Net_Amount_TradeCur)
            .Titled("Exec Net Amount-Trade Curr")
            .Css("text-right").Filterable(false)
            .RenderValueAs(x => String.Format("<span class=\"pull-right\">{0:0,0.00}</span>", x.Execution_Net_Amount_TradeCur)).Encoded(false)
            .Sanitized(false)
            .SetWidth(120); 
        
        columns.Add()
            .Encoded(false)
            .Sanitized(false)
            .SetWidth(20)
            .RenderValueAs(c => @<u>
                @Html.ActionLink("Details", "Details", "OrderAllocation", new { id = c.Allocation_ID }, null)
            </u>);  

    }).WithPaging(50).Sortable(true)

</div>

<div class="panel-footer">
        <div class="row">
            <div class="col-xs-12">
                <div class="pull-left">
                    <button type="button" id="buttonBulkDelete" class="btn btn-warning">
                        Delete Selected
                        <span class="glyphicon glyphicon-trash"></span>
                    </button> 
                </div>
            </div>
        </div>
    </div>

<div id="divProcessing">
    <p>Processing, . . . . . . . <img src="~/Content/ajax-loader.gif"></p>
</div>
 
@section Scripts {
    @Scripts.Render("~/bundles/GridMvc")
    <script>
        function toggleChecked(status) {
            $(".grid-row  input").each(function () {
                // Set the checked status of each grid-row input to match the
                // checked prop status of the check all checkbox:
                $(this).prop("checked", status);
            });
        }
        function selectedCheckbox(s,b) {

        }
        $(function () {
            // Hide the "busy" Gif at load:
            $("#divProcessing").hide();

            $("#select-all-checkbox").prop('checked', false);
            $("#select-all-checkbox").click(function () {
                var status = $("#select-all-checkbox").prop('checked');
                toggleChecked(status);
            });
        });

        $(buttonBulkDelete).click(function () {
            if (confirm('Are you sure you want to delete the selected rows ?')) {
                makeAjaxCall();
        }
            function makeAjaxCall()
            {

            var myArray = [];
                var checkedValues = $("input:checkbox:checked", ".grid-row").map(function () {
                    return $(this).val();
                }).get();

                // Show the "busy" Gif:
                $("#divProcessing").show();

                $.ajax({
                    type: "POST",
                    url:  mtpApp.Urls.baseUrl +'OrderAllocation/BulkDelete',
                    data: { 'myArray': checkedValues.join() },
                    dataType: 'json',
                    success: function (response) { 
                        // Hide the "busy" gif:
                        $("#divProcessing").hide();

                        if (response.success) {
                            myNav = mtpApp.Urls.baseUrl + "OrderAllocation/" + response.responseText; // build up Index url 
                            window.location.href = myNav;

                        } else {
                            alert(response.responseText);  // the caught error
                        }
                    },
                    //error: function (xhr, httpStatusMessage, customErrorMessage) {
                    error: function (responseText) {

                        // Hide the "busy" gif:
                        $("#divProcessing").hide();

                        alert("something went awefully wrong!" + responseTexts);
                    }
                });
            }
        });
        // We want to show this while the server process is running: 
    </script>
     
}
